---
import { getCollection } from 'astro:content';
interface Tema {
  data: {
    unidad: string;
    title: string;
    description: string;
    id: string;
    slug: string;
  };
}

const temas: Tema[] = await getCollection('temas');
export const prerender = true;

const temasPorUnidad = temas.reduce((acc: Record<string, Tema[]>, tema: Tema) => {
  const { unidad } = tema.data;
  if (!acc[unidad]) {
    acc[unidad] = [];
  }
  acc[unidad].push(tema);
  return acc;
}, {});
---

{Object.entries(temasPorUnidad).map(([unidad, temas]) => (
  <section>
    <h2 class="title_teme" >{unidad}</h2>
    <div class="menu_temas">
    {temas.map((tema) => {
      const { data } = tema;
      const { title, description, slug, id } = data;
      return (
        <a href={`/tema/${slug}`} style="text-decoration: none;">
          <div class="card" id={`${slug}`}>
            <img 
              class="image_teme" 
              src={`/${id}.jpg`} 
              alt={`${id}`}/>
            <div>
              <h3 transition:name={`name-${title}`} class="text-gradient">
                  {title}
              </h3>
              <span class="description">{description}</span>
            </div>
            <br/>
            <span class="boton_de_ilucionxddd"> Ver mas... </span>
          </div>
        </a>
      );
    })}
    </div>
  </section>
))}
<div style="width: 100%; text-align: center; display: flex;justify-content: center;margin-top: 10rem;">
    <div data-glitch="CONCLUCIONES" class="glitch">CONCLUSIONES</div>
</div>
<style>
  .card {
    position: relative;
    overflow: hidden;
    border: 1px solid #ffffff;
    padding: 16px;
    margin-top: 16px;
    border-radius: 8px;
    color: #ffffff;
    box-shadow: 0 0 10px rgba(255, 105, 180, 0.5);
    background-image: radial-gradient(black 55%, #0000),
      linear-gradient(
        135deg,
        cyan,
        blue,
        indigo,
        deeppink,
        crimson
      );
    background-size: 100% 0.3%, contain;
    transition: opacity 0.5s ease-in-out, filter 0.5s ease-in-out, transform 0.5s ease-in-out;
  }
  .card:hover {
    transform: scale(1.05);
    transition: transform 0.5s ease-in-out;
    .image_teme {

      opacity: 0.3;
      filter: blur(0px);
      transition: opacity 0.5s ease-in-out, filter 0.5s ease-in-out;
    }
  }
  .description {
    color: #ffffff;
    font-size: 0.7em;
    font-weight: 400;
  }
  .content {
    color: #ffffff;
    font-size: 0.8em;
    font-weight: 400;
  }
  .title_teme{
    position: sticky;
    top: 0;
    text-shadow: 0 0 10px rgba(255, 105, 180, 0.5);
  }
  .text-gradient {
    background: linear-gradient(45deg, #ff6b6b, #f06595, #cc5de8, #845ef7, #5c7cfa, #339af0, #22b8cf, #20c997, #51cf66, #94d82d, #fcc419, #ff922b);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  .menu_temas {
    display: grid;
    grid-template-columns: auto auto;
    gap: 1rem;
    width: 100%;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
  }
  .image_teme {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 8px;
    position: absolute;
    top: 0;
    left: 0;
    transition: opacity 0.5s ease-in-out, filter 0.5s ease-in-out;
    opacity: 0;
    pointer-events: none;
    filter: blur(3px);
  }
  @media (max-width: 600px) {
    .menu_temas {
      display: flex;
      flex-direction: column;
      width: 100%;
      margin: auto;
    }
  }

  /* From Uiverse.io by andrew-demchenk0 */ 
.glitch {
  position: relative;
  font-size: 25px;
  font-weight: 700;
  line-height: 1.2;
  color: #fff;
  letter-spacing: 5px;
  z-index: 1;
  animation: shift 1s ease-in-out infinite alternate;
}

.glitch:before,
.glitch:after {
  display: block;
  content: attr(data-glitch);
  position: absolute;
  top: 0;
  left: 0;
  opacity: 0.8;
}

.glitch:before {
  animation: glitch 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) both infinite;
  color: #8b00ff;
  z-index: -1;
}

.glitch:after {
  animation: glitch 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) reverse both infinite;
  color: #00e571;
  z-index: -2;
}

@keyframes glitch {
  0% {
    transform: translate(0);
  }

  20% {
    transform: translate(-3px, 3px);
  }

  40% {
    transform: translate(-3px, -3px);
  }

  60% {
    transform: translate(3px, 3px);
  }

  80% {
    transform: translate(3px, -3px);
  }

  to {
    transform: translate(0);
  }
}

@keyframes shift {
  0%, 40%, 44%, 58%, 61%, 65%, 69%, 73%, 100% {
    transform: skewX(0deg);
  }

  41% {
    transform: skewX(10deg);
  }

  42% {
    transform: skewX(-10deg);
  }

  59% {
    transform: skewX(40deg) skewY(10deg);
  }

  60% {
    transform: skewX(-40deg) skewY(-10deg);
  }

  63% {
    transform: skewX(10deg) skewY(-5deg);
  }

  70% {
    transform: skewX(-50deg) skewY(-20deg);
  }

  71% {
    transform: skewX(10deg) skewY(-10deg);
  }
}

</style>